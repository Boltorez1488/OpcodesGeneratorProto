// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_main_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_main_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_main_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_main_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_main_2eproto;
namespace ClientProto {
class Message2;
class Message2DefaultTypeInternal;
extern Message2DefaultTypeInternal _Message2_default_instance_;
class TestMsg;
class TestMsgDefaultTypeInternal;
extern TestMsgDefaultTypeInternal _TestMsg_default_instance_;
class TestMsg_AABB;
class TestMsg_AABBDefaultTypeInternal;
extern TestMsg_AABBDefaultTypeInternal _TestMsg_AABB_default_instance_;
}  // namespace ClientProto
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientProto::Message2* Arena::CreateMaybeMessage<::ClientProto::Message2>(Arena*);
template<> ::ClientProto::TestMsg* Arena::CreateMaybeMessage<::ClientProto::TestMsg>(Arena*);
template<> ::ClientProto::TestMsg_AABB* Arena::CreateMaybeMessage<::ClientProto::TestMsg_AABB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ClientProto {

// ===================================================================

class TestMsg_AABB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientProto.TestMsg.AABB) */ {
 public:
  inline TestMsg_AABB() : TestMsg_AABB(nullptr) {};
  virtual ~TestMsg_AABB();

  TestMsg_AABB(const TestMsg_AABB& from);
  TestMsg_AABB(TestMsg_AABB&& from) noexcept
    : TestMsg_AABB() {
    *this = ::std::move(from);
  }

  inline TestMsg_AABB& operator=(const TestMsg_AABB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg_AABB& operator=(TestMsg_AABB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMsg_AABB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMsg_AABB* internal_default_instance() {
    return reinterpret_cast<const TestMsg_AABB*>(
               &_TestMsg_AABB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMsg_AABB& a, TestMsg_AABB& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg_AABB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg_AABB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMsg_AABB* New() const final {
    return CreateMaybeMessage<TestMsg_AABB>(nullptr);
  }

  TestMsg_AABB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMsg_AABB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMsg_AABB& from);
  void MergeFrom(const TestMsg_AABB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg_AABB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientProto.TestMsg.AABB";
  }
  protected:
  explicit TestMsg_AABB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_main_2eproto);
    return ::descriptor_table_main_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:ClientProto.TestMsg.AABB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class TestMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientProto.TestMsg) */ {
 public:
  static constexpr unsigned long Opcode = 2;
 public:
  inline TestMsg() : TestMsg(nullptr) {};
  virtual ~TestMsg();

  TestMsg(const TestMsg& from);
  TestMsg(TestMsg&& from) noexcept
    : TestMsg() {
    *this = ::std::move(from);
  }

  inline TestMsg& operator=(const TestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg& operator=(TestMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMsg* internal_default_instance() {
    return reinterpret_cast<const TestMsg*>(
               &_TestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMsg& a, TestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMsg* New() const final {
    return CreateMaybeMessage<TestMsg>(nullptr);
  }

  TestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMsg& from);
  void MergeFrom(const TestMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientProto.TestMsg";
  }
  protected:
  explicit TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_main_2eproto);
    return ::descriptor_table_main_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TestMsg_AABB AABB;

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
  };
  // .ClientProto.TestMsg.AABB desc = 1;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const ::ClientProto::TestMsg_AABB& desc() const;
  ::ClientProto::TestMsg_AABB* release_desc();
  ::ClientProto::TestMsg_AABB* mutable_desc();
  void set_allocated_desc(::ClientProto::TestMsg_AABB* desc);
  private:
  const ::ClientProto::TestMsg_AABB& _internal_desc() const;
  ::ClientProto::TestMsg_AABB* _internal_mutable_desc();
  public:
  void unsafe_arena_set_allocated_desc(
      ::ClientProto::TestMsg_AABB* desc);
  ::ClientProto::TestMsg_AABB* unsafe_arena_release_desc();

  // @@protoc_insertion_point(class_scope:ClientProto.TestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ClientProto::TestMsg_AABB* desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Message2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientProto.Message2) */ {
 public:
  static constexpr unsigned long Opcode = 3;
 public:
  inline Message2() : Message2(nullptr) {};
  virtual ~Message2();

  Message2(const Message2& from);
  Message2(Message2&& from) noexcept
    : Message2() {
    *this = ::std::move(from);
  }

  inline Message2& operator=(const Message2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message2& operator=(Message2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message2* internal_default_instance() {
    return reinterpret_cast<const Message2*>(
               &_Message2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message2& a, Message2& b) {
    a.Swap(&b);
  }
  inline void Swap(Message2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message2* New() const final {
    return CreateMaybeMessage<Message2>(nullptr);
  }

  Message2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message2& from);
  void MergeFrom(const Message2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientProto.Message2";
  }
  protected:
  explicit Message2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_main_2eproto);
    return ::descriptor_table_main_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientProto.Message2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_main_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMsg_AABB

// float x = 1;
inline void TestMsg_AABB::clear_x() {
  x_ = 0;
}
inline float TestMsg_AABB::_internal_x() const {
  return x_;
}
inline float TestMsg_AABB::x() const {
  // @@protoc_insertion_point(field_get:ClientProto.TestMsg.AABB.x)
  return _internal_x();
}
inline void TestMsg_AABB::_internal_set_x(float value) {
  
  x_ = value;
}
inline void TestMsg_AABB::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ClientProto.TestMsg.AABB.x)
}

// float y = 2;
inline void TestMsg_AABB::clear_y() {
  y_ = 0;
}
inline float TestMsg_AABB::_internal_y() const {
  return y_;
}
inline float TestMsg_AABB::y() const {
  // @@protoc_insertion_point(field_get:ClientProto.TestMsg.AABB.y)
  return _internal_y();
}
inline void TestMsg_AABB::_internal_set_y(float value) {
  
  y_ = value;
}
inline void TestMsg_AABB::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ClientProto.TestMsg.AABB.y)
}

// float z = 3;
inline void TestMsg_AABB::clear_z() {
  z_ = 0;
}
inline float TestMsg_AABB::_internal_z() const {
  return z_;
}
inline float TestMsg_AABB::z() const {
  // @@protoc_insertion_point(field_get:ClientProto.TestMsg.AABB.z)
  return _internal_z();
}
inline void TestMsg_AABB::_internal_set_z(float value) {
  
  z_ = value;
}
inline void TestMsg_AABB::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ClientProto.TestMsg.AABB.z)
}

// float w = 4;
inline void TestMsg_AABB::clear_w() {
  w_ = 0;
}
inline float TestMsg_AABB::_internal_w() const {
  return w_;
}
inline float TestMsg_AABB::w() const {
  // @@protoc_insertion_point(field_get:ClientProto.TestMsg.AABB.w)
  return _internal_w();
}
inline void TestMsg_AABB::_internal_set_w(float value) {
  
  w_ = value;
}
inline void TestMsg_AABB::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:ClientProto.TestMsg.AABB.w)
}

// -------------------------------------------------------------------

// TestMsg

// .ClientProto.TestMsg.AABB desc = 1;
inline bool TestMsg::_internal_has_desc() const {
  return this != internal_default_instance() && desc_ != nullptr;
}
inline bool TestMsg::has_desc() const {
  return _internal_has_desc();
}
inline void TestMsg::clear_desc() {
  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
}
inline const ::ClientProto::TestMsg_AABB& TestMsg::_internal_desc() const {
  const ::ClientProto::TestMsg_AABB* p = desc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientProto::TestMsg_AABB*>(
      &::ClientProto::_TestMsg_AABB_default_instance_);
}
inline const ::ClientProto::TestMsg_AABB& TestMsg::desc() const {
  // @@protoc_insertion_point(field_get:ClientProto.TestMsg.desc)
  return _internal_desc();
}
inline void TestMsg::unsafe_arena_set_allocated_desc(
    ::ClientProto::TestMsg_AABB* desc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_);
  }
  desc_ = desc;
  if (desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientProto.TestMsg.desc)
}
inline ::ClientProto::TestMsg_AABB* TestMsg::release_desc() {
  auto temp = unsafe_arena_release_desc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientProto::TestMsg_AABB* TestMsg::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_release:ClientProto.TestMsg.desc)
  
  ::ClientProto::TestMsg_AABB* temp = desc_;
  desc_ = nullptr;
  return temp;
}
inline ::ClientProto::TestMsg_AABB* TestMsg::_internal_mutable_desc() {
  
  if (desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientProto::TestMsg_AABB>(GetArena());
    desc_ = p;
  }
  return desc_;
}
inline ::ClientProto::TestMsg_AABB* TestMsg::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:ClientProto.TestMsg.desc)
  return _internal_mutable_desc();
}
inline void TestMsg::set_allocated_desc(::ClientProto::TestMsg_AABB* desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete desc_;
  }
  if (desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(desc);
    if (message_arena != submessage_arena) {
      desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    
  } else {
    
  }
  desc_ = desc;
  // @@protoc_insertion_point(field_set_allocated:ClientProto.TestMsg.desc)
}

// -------------------------------------------------------------------

// Message2

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_main_2eproto
